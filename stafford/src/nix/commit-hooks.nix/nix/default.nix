{
  sources ? import ./sources.nix,
  system ? builtins.currentSystem,
  nixpkgs ? sources.nixpkgs,
  gitignore-nix-src ? sources."gitignore.nix",
  isFlakes ? false,
}: let
  overlay = self: pkgs: let
    tools =
      pkgs.lib.filterAttrs
      (k: v: !(pkgs.lib.any (a: k == a) ["override" "overrideDerivation"]))
      (pkgs.callPackage ./tools.nix {});
    run = pkgs.callPackage ./run.nix {
      inherit pkgs tools isFlakes gitignore-nix-src;
    };
  in {
    inherit (pkgs) nixfmt niv ormolu nixpkgs-fmt nix-linter;
    cabal-fmt =
      (pkgs.haskell.lib.enableSeparateBinOutput
        pkgs.haskellPackages.cabal-fmt)
      .bin;
    hindent =
      pkgs.haskell.lib.enableSeparateBinOutput pkgs.haskellPackages.hindent;
    inherit tools run;
    # Flake style attributes
    packages = tools // {inherit (pkgs) pre-commit;};
    checks =
      self.packages
      // {
        # A pre-commit-check for nix-pre-commit itself
        pre-commit-check = run {
          src = ../.;
          hooks = {
            shellcheck.enable = true;
            nixpkgs-fmt.enable = true;
          };
          excludes = [
            # autogenerated by niv
            "nix/sources.nix$"
          ];
        };
      };
  };
in
  import nixpkgs {
    overlays = [overlay];
    # broken is needed for hindent to build
    config = {allowBroken = true;};
    inherit system;
  }
